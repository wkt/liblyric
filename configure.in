# Initialization

m4_define([major_version], [1])
m4_define([minor_version], [1])
m4_define([micro_version], [0])
m4_define([interface_age], [1])
m4_define([binary_age],
          [m4_eval(100 * minor_version + micro_version)])
m4_define([liblyric_version],
          [major_version.minor_version.micro_version])

###m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([no])])

AC_INIT([liblyric], [liblyric_version],
        [http://code.google.com/p/liblyric/issues/list],
	[liblyric])

AM_INIT_AUTOMAKE(no-define)

VERSION=liblyric_version
PACKAGE=liblyric

AC_SUBST(PACKAGE)
AC_SUBST(VERSION)

AM_INIT_AUTOMAKE($PACKAGE, $VERSION)
AM_CONFIG_HEADER(config.h)

AM_MAINTAINER_MODE

CFLAGS="-g3"
LDFLAGS="-g3"

# Used programs

AC_PROG_CC
AM_PROG_CC_C_O
AM_PROG_LIBTOOL


m4_define([lt_current], [m4_eval(100 * minor_version + micro_version - interface_age)])
m4_define([lt_revision], [interface_age])
m4_define([lt_age], [m4_eval(binary_age - interface_age)])
LT_cur=lt_current
LT_rver=lt_revision
LT_age=lt_age
LT_VERSION_INFO="$LT_cur:$LT_rver:$LT_age"
AC_SUBST(LT_VERSION_INFO)
# Check for pkg-config

AC_CHECK_PROG(HAVE_PKGCONFIG, pkg-config, yes, no)
AC_PATH_PROG(PKG_CONFIG, pkg-config, no)
if test "x$HAVE_PKGCONFIG" = "xno"; then
	AC_MSG_ERROR(you need to have pkgconfig installed !)
fi

AC_ARG_ENABLE([test],
[  --enable-test    Turn on testing],
[case "${enableval}" in
yes) TEST=true ;;
no)  TEST=false ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-test]) ;;
esac],[TEST=false])

AM_CONDITIONAL([TEST], [test x$TEST = xtrue])

# Dependency checks

AC_ARG_ENABLE([gtk2],
[  --enable-gtk2    use gtk2 for building],
[case "${enableval}" in
yes) gtk2=true ;;
no)  gtk2=false ;;
*) AC_MSG_ERROR([bad value ${enableval} for --enable-gtk2]) ;;
esac],[gtk2=false])

AM_CONDITIONAL([USE_GTK2], [test x$gtk2 = xtrue])

if test x${gtk2} == xtrue ;then
    GTK=gtk+-2.0
    GTK_REQUIRED=2.12.0
    GTK_NAME=gtk2
else
    GTK=gtk+-3.0
    GTK_REQUIRED=3.2.0
    GTK_NAME=gtk3
fi

AC_SUBST(GTK)
AC_SUBST(GTK_NAME)

GLIB_REQUIRED=2.24.0

PKG_CHECK_MODULES(GTK, [
	$GTK >= $GTK_REQUIRED
	glib-2.0 >= $GLIB_REQUIRED
	gthread-2.0
])

#PKG_CHECK_MODULES(GCONF, gconf-2.0)
#PKG_CHECK_MODULES(GNOMEDESKTOP, gnome-desktop-2.0 >= $LIBGNOME_DESKTOP_REQUIRED)

#PKG_CHECK_MODULES(CURL,libcurl)

PKG_CHECK_MODULES(LIBXML2,libxml-2.0)

# Make dependency CFLAGS and LIBS available


# Get nautilus extensions directory

##NAUTILUS_EXTENSION_DIR=`$PKG_CONFIG --variable=extensiondir libnautilus-extension`
##AC_SUBST(NAUTILUS_EXTENSION_DIR)

LIB_LYRIC_DIR=$libdir
AC_SUBST(LIB_LYRIC_DIR)

UIDIR=${datadir}/$PACKAGE
AC_SUBST(UIDIR)
#AC_DEFINE_UNQUOTED([UIDIR],"$UIDIR",[directory look for ui])
# GConf

#AC_PATH_PROG(GCONFTOOL, gconftool-2, no)

#if test x"$GCONFTOOL" = xno; then
#	AC_MSG_ERROR([gconftool-2 executable not found in your path - should be installed with GConf])
#fi

#AM_GCONF_SOURCE_2


# i18n

GETTEXT_PACKAGE=$PACKAGE
AC_SUBST([GETTEXT_PACKAGE])
AC_DEFINE_UNQUOTED([GETTEXT_PACKAGE], "$GETTEXT_PACKAGE", [Gettext package])
AM_GLIB_GNU_GETTEXT
IT_PROG_INTLTOOL([0.35.0])

if test "x${prefix}" = "xNONE"; then
  AC_DEFINE_UNQUOTED(LOCALEDIR, "${ac_default_prefix}/${DATADIRNAME}/locale", [Locale dir])
else
  AC_DEFINE_UNQUOTED(LOCALEDIR, "${prefix}/${DATADIRNAME}/locale", [Locale dir])
fi

# output

AC_OUTPUT([
	Makefile
	liblyric.pc
	liblyric/Makefile
	po/Makefile.in
	data/Makefile
])

echo -e "\n\n"
echo "       "'${prefix}'=${prefix}
echo "       GTK=$GTK"
echo "       TEST="$TEST
echo
